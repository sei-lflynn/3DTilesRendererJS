{"version":3,"file":"loadRegion-BZCG1Rt6.js","sources":["../../../src/three/plugins/LoadRegionPlugin.js","../../loadRegion.js"],"sourcesContent":["import { Ray, Sphere } from 'three';\nimport { OBB } from '3d-tiles-renderer/three';\n\nexport class LoadRegionPlugin {\n\n\tconstructor() {\n\n\t\tthis.name = 'LOAD_REGION_PLUGIN';\n\t\tthis.regions = [];\n\t\tthis.tiles = null;\n\n\t}\n\n\tinit( tiles ) {\n\n\t\tthis.tiles = tiles;\n\n\t}\n\n\taddRegion( region ) {\n\n\t\tif ( this.regions.indexOf( region ) === - 1 ) {\n\n\t\t\tthis.regions.push( region );\n\n\t\t}\n\n\t}\n\n\tremoveRegion( region ) {\n\n\t\tconst index = this.regions.indexOf( region );\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.regions.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\thasRegion( region ) {\n\n\t\treturn this.regions.indexOf( region ) !== - 1;\n\n\t}\n\n\tclearRegions() {\n\n\t\tthis.regions = [];\n\n\t}\n\n\tcalculateTileViewError( tile, target ) {\n\n\t\tconst boundingVolume = tile.cached.boundingVolume;\n\t\tconst { regions, tiles } = this;\n\n\t\tlet visible = false;\n\t\tlet maxError = - Infinity;\n\t\tfor ( const region of regions ) {\n\n\t\t\tconst intersects = region.intersectsTile( boundingVolume, tile, tiles );\n\t\t\tif ( intersects ) {\n\n\t\t\t\tvisible = true;\n\t\t\t\tmaxError = Math.max( region.calculateError( tile, tiles ), maxError );\n\n\t\t\t}\n\n\t\t}\n\n\t\ttarget.inView = visible;\n\t\ttarget.error = maxError;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.regions = [];\n\n\t}\n\n}\n\n// Definitions of predefined regions\nexport class BaseRegion {\n\n\tconstructor( errorTarget = 10 ) {\n\n\t\tthis.errorTarget = errorTarget;\n\n\t}\n\n\tintersectsTile() {}\n\n\tcalculateError( tile, tilesRenderer ) {\n\n\t\treturn tile.geometricError - this.errorTarget + tilesRenderer.errorTarget;\n\n\t}\n\n}\n\nexport class SphereRegion extends BaseRegion {\n\n\tconstructor( errorTarget = 10, sphere = new Sphere() ) {\n\n\t\tsuper( errorTarget );\n\t\tthis.sphere = sphere.clone();\n\n\t}\n\n\tintersectsTile( boundingVolume ) {\n\n\t\treturn boundingVolume.intersectsSphere( this.sphere );\n\n\t}\n\n}\n\nexport class RayRegion extends BaseRegion {\n\n\tconstructor( errorTarget = 10, ray = new Ray() ) {\n\n\t\tsuper( errorTarget );\n\t\tthis.ray = ray.clone();\n\n\t}\n\n\tintersectsTile( boundingVolume ) {\n\n\t\treturn boundingVolume.intersectsRay( this.ray );\n\n\t}\n\n}\n\nexport class OBBRegion extends BaseRegion {\n\n\tconstructor( errorTarget = 10, obb = new OBB() ) {\n\n\t\tsuper( errorTarget );\n\t\tthis.obb = obb.clone();\n\t\tthis.obb.update();\n\n\t}\n\n\tintersectsTile( boundingVolume ) {\n\n\t\treturn boundingVolume.intersectsOBB( this.obb );\n\n\t}\n\n}\n","import { EnvironmentControls, TilesRenderer } from '3d-tiles-renderer';\nimport {\n\tDebugTilesPlugin,\n\tLoadRegionPlugin,\n\tRayRegion,\n\tOBBRegion,\n\tSphereRegion,\n} from '3d-tiles-renderer/plugins';\nimport {\n\tScene,\n\tWebGLRenderer,\n\tPerspectiveCamera,\n\tMesh,\n\tVector3,\n\tSphereGeometry,\n\tBoxGeometry,\n\tClock,\n\tLine,\n} from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\n\nlet camera, controls, scene, renderer, tiles;\nlet rayRegion, sphereRegion, boxRegion;\nlet sphereMesh, rayMesh, boxMesh;\nlet clock, time = 0;\n\nconst params = {\n\n\tanimate: true,\n\tregion: 'SPHERE',\n\tregionErrorTarget: 0.1,\n\tregionOnly: true,\n\tdisplayBoxBounds: false,\n\n};\n\ninit();\nanimate();\n\nfunction init() {\n\n\tscene = new Scene();\n\n\t// primary camera view\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( 0x151c1f );\n\n\tdocument.body.appendChild( renderer.domElement );\n\trenderer.domElement.tabIndex = 1;\n\n\t// update the camera\n\tcamera = new PerspectiveCamera(\n\t\t60,\n\t\twindow.innerWidth / window.innerHeight,\n\t\t1,\n\t\t100000\n\t);\n\tcamera.position.set( 100, 100, 100 );\n\tcamera.lookAt( 0, 0, 0 );\n\tscene.add( camera );\n\n\t// clock\n\tclock = new Clock();\n\n\t// init tiles\n\ttiles = new TilesRenderer( 'https://raw.githubusercontent.com/NASA-AMMOS/3DTilesSampleData/master/msl-dingo-gap/0528_0260184_to_s64o256_colorize/0528_0260184_to_s64o256_colorize/0528_0260184_to_s64o256_colorize_tileset.json' );\n\ttiles.registerPlugin( new DebugTilesPlugin() );\n\ttiles.registerPlugin( new LoadRegionPlugin() );\n\ttiles.group.rotation.x = Math.PI / 2;\n\tscene.add( tiles.group );\n\n\t// controls\n\tcontrols = new EnvironmentControls( tiles.group, camera, renderer.domElement );\n\tcontrols.enableDamping = true;\n\n\t// initialize regions\n\trayRegion = new RayRegion();\n\tsphereRegion = new SphereRegion();\n\tsphereRegion.sphere.radius = 15;\n\tboxRegion = new OBBRegion();\n\tboxRegion.obb.box.min = new Vector3( - 50, - 50, - 5 );\n\tboxRegion.obb.box.max = new Vector3( 50, 50, 5 );\n\n\t// initialize region meshes\n\tsphereMesh = new Mesh( new SphereGeometry() );\n\tsphereMesh.material.transparent = true;\n\tsphereMesh.material.opacity = 0.25;\n\n\tboxMesh = new Mesh( new BoxGeometry() );\n\tboxMesh.material.transparent = true;\n\tboxMesh.material.opacity = 0.25;\n\n\trayMesh = new Line();\n\trayMesh.geometry.setFromPoints( [ new Vector3(), new Vector3( 0, - 1000, 0 ) ] );\n\trayMesh.material.opacity = 0.5;\n\trayMesh.material.transparent = true;\n\n\t// update the region to display\n\tupdateRegion( params.region );\n\n\t// update camera parameters\n\tonWindowResize();\n\twindow.addEventListener( 'resize', onWindowResize, false );\n\n\t// GUI\n\tconst gui = new GUI();\n\tgui.width = 300;\n\tgui.add( params, 'region', [ 'SPHERE', 'BOX', 'RAY' ] ).onChange( updateRegion );\n\tgui.add( params, 'regionErrorTarget' ).min( 0 ).max( 1 );\n\tgui.add( params, 'animate' );\n\tgui.add( params, 'regionOnly' ).onChange( v => {\n\n\t\tif ( ! v ) {\n\n\t\t\ttiles.setCamera( camera );\n\t\t\tonWindowResize();\n\n\t\t} else {\n\n\t\t\ttiles.deleteCamera( camera );\n\n\t\t}\n\n\t} );\n\tgui.add( params, 'displayBoxBounds' );\n\n\tgui.open();\n\n}\n\nfunction onWindowResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\tcamera.updateProjectionMatrix();\n\trenderer.setPixelRatio( window.devicePixelRatio * 1 );\n\ttiles.setResolutionFromRenderer( camera, renderer );\n\n}\n\nfunction updateRegion( region ) {\n\n\tconst plugin = tiles.getPluginByName( 'LOAD_REGION_PLUGIN' );\n\tplugin.clearRegions();\n\tscene.remove( rayMesh, sphereMesh, boxMesh );\n\n\tif ( region === 'SPHERE' ) {\n\n\t\tplugin.addRegion( sphereRegion );\n\t\tscene.add( sphereMesh );\n\n\t} else if ( region === 'RAY' ) {\n\n\t\tplugin.addRegion( rayRegion );\n\t\tscene.add( rayMesh );\n\n\t} else if ( region === 'BOX' ) {\n\n\t\tplugin.addRegion( boxRegion );\n\t\tscene.add( boxMesh );\n\n\t}\n\n}\n\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\t// update time step\n\tif ( params.animate ) {\n\n\t\ttime += clock.getDelta();\n\n\t} else {\n\n\t\tclock.getDelta();\n\n\t}\n\n\t// update debug plugin\n\tconst debugPlugin = tiles.getPluginByName( 'DEBUG_TILES_PLUGIN' );\n\tdebugPlugin.enabled = params.displayBoxBounds;\n\tdebugPlugin.displayBoxBounds = params.displayBoxBounds;\n\n\t// update the regions\n\tif ( params.region === 'SPHERE' ) {\n\n\t\tsphereMesh.position.set( Math.sin( time ) * 20, 0, Math.cos( time ) * 20 );\n\t\tsphereMesh.scale.setScalar( sphereRegion.sphere.radius );\n\n\t\tsphereRegion.errorTarget = params.regionErrorTarget;\n\t\tsphereRegion.sphere.center\n\t\t\t.copy( sphereMesh.position )\n\t\t\t.applyMatrix4( tiles.group.matrixWorldInverse );\n\n\t} else if ( params.region === 'RAY' ) {\n\n\t\trayMesh.position.set( Math.sin( time * 2 ) * 20, 50, Math.cos( time * 2 ) * 20 );\n\n\t\trayRegion.errorTarget = params.regionErrorTarget;\n\t\trayRegion.ray.direction\n\t\t\t.set( 0, - 1, 0 )\n\t\t\t.transformDirection( tiles.group.matrixWorldInverse );\n\t\trayRegion.ray.origin\n\t\t\t.copy( rayMesh.position )\n\t\t\t.applyMatrix4( tiles.group.matrixWorldInverse );\n\n\t} else if ( params.region === 'BOX' ) {\n\n\t\tboxMesh.scale.set( 50, 10, 50 );\n\t\tboxMesh.rotation.y = time;\n\t\tboxMesh.updateMatrixWorld();\n\t\tboxMesh.geometry.computeBoundingBox();\n\n\t\tboxRegion.errorTarget = params.regionErrorTarget;\n\t\tboxRegion.obb.box.copy( boxMesh.geometry.boundingBox );\n\t\tboxRegion.obb.transform.copy( boxMesh.matrixWorld ).premultiply( tiles.group.matrixWorldInverse );\n\t\tboxRegion.obb.update();\n\n\t}\n\n\t// update tiles\n\tcontrols.update();\n\tcamera.updateMatrixWorld();\n\ttiles.update();\n\n\t// render\n\trenderer.render( scene, camera );\n\n}\n"],"names":["LoadRegionPlugin","tiles","region","index","tile","target","boundingVolume","regions","visible","maxError","BaseRegion","errorTarget","tilesRenderer","SphereRegion","sphere","Sphere","RayRegion","ray","Ray","OBBRegion","obb","OBB","camera","controls","scene","renderer","rayRegion","sphereRegion","boxRegion","sphereMesh","rayMesh","boxMesh","clock","time","params","init","animate","Scene","WebGLRenderer","PerspectiveCamera","Clock","TilesRenderer","DebugTilesPlugin","EnvironmentControls","Vector3","Mesh","SphereGeometry","BoxGeometry","Line","updateRegion","onWindowResize","gui","GUI","v","plugin","debugPlugin"],"mappings":"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"}